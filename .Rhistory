'prop_management' = 'prop_management_company_name',
'accessible_parking' = 'no_of_accessible_parking_spaces',
'barrier_free_accessible_units' = 'no_barrier_free_accessible_units')) %>%
ggplot(aes(x = fct_rev(fct_reorder(col_name, NA_count)), y = NA_count)) +
geom_col() +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
theme_minimal()
#count NA, tidy data and arrange in descending order
apt_buildings_NA <- apt_buildings %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = 'col_name', values_to = 'NA_count') %>%
arrange(desc(NA_count))
print(apt_buildings_NA)
#create bar graph for 5 columns with the highest number of NA values
apt_buildings_NA %>%
slice_max(NA_count, n = 5) %>%
#shorten column names
mutate(col_name = fct_recode(col_name,
'prop_management' = 'prop_management_company_name',
'accessible_parking' = 'no_of_accessible_parking_spaces',
'barrier_free_accessible_units' = 'no_barrier_free_accessible_units')) %>%
ggplot(aes(x = fct_rev(fct_reorder(col_name, NA_count)), y = NA_count)) +
geom_point() +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
theme_minimal()
#count NA, tidy data and arrange in descending order
apt_buildings_NA <- apt_buildings %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = 'col_name', values_to = 'NA_count') %>%
arrange(desc(NA_count))
print(apt_buildings_NA)
#create bar graph for 5 columns with the highest number of NA values
apt_buildings_NA %>%
slice_max(NA_count, n = 5) %>%
#shorten column names
mutate(col_name = fct_recode(col_name,
'prop_management' = 'prop_management_company_name',
'accessible_parking' = 'no_of_accessible_parking_spaces',
'barrier_free_accessible_units' = 'no_barrier_free_accessible_units')) %>%
ggplot(aes(x = fct_rev(fct_reorder(col_name, NA_count)), y = NA_count)) +
geom_col() +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
ggtitle('NA Count') +
xlab('Column') +
ylab('Number of NA') +
theme_minimal()
#count NA, tidy data and arrange in descending order
apt_buildings_NA <- apt_buildings %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = 'col_name', values_to = 'NA_count') %>%
arrange(desc(NA_count))
print(apt_buildings_NA)
#create bar graph for 5 columns with the highest number of NA values
apt_buildings_NA %>%
slice_max(NA_count, n = 5) %>%
#shorten column names
mutate(col_name = fct_recode(col_name,
'prop_management' = 'prop_management_company_name',
'accessible_parking' = 'no_of_accessible_parking_spaces',
'barrier_free_accessible_units' = 'no_barrier_free_accessible_units')) %>%
ggplot(aes(x = fct_rev(fct_reorder(col_name, NA_count)), y = NA_count)) +
geom_point() +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
ggtitle('NA Count') +
xlab('Column') +
ylab('Number of NA') +
theme_minimal()
#count NA, tidy data and arrange in descending order
apt_buildings_NA <- apt_buildings %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = 'col_name', values_to = 'NA_count') %>%
arrange(desc(NA_count))
print(apt_buildings_NA)
#create bar graph for 5 columns with the highest number of NA values
apt_buildings_NA %>%
slice_max(NA_count, n = 5) %>%
#shorten column names
mutate(col_name = fct_recode(col_name,
'prop_management' = 'prop_management_company_name',
'accessible_parking' = 'no_of_accessible_parking_spaces',
'barrier_free_accessible_units' = 'no_barrier_free_accessible_units')) %>%
ggplot(aes(x = fct_rev(fct_reorder(col_name, NA_count)), y = NA_count)) +
geom_point() +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
ggtitle('Columns with Highest NA Count') +
xlab('Column') +
ylab('NA count') +
theme_minimal()
#convert amenities to factor
amenities_fct <- as.factor(apt_buildings$amenities)
#compute counts of each level
amenities_count <- fct_count(amenities_fct)
#convert each cell into single value
amenities_count %>%
separate(f, into = c('f1','f2','f3', 'f4','f5','f6'), sep = ' , ') %>% #convert each cell to single value
pivot_longer(c('f1','f2','f3', 'f4','f5','f6'), names_to = 'f', values_to = 'amenities_type') %>% #place amenities in single variable
select(amenities_type) %>% #show only amenities type
na.omit() %>% #omit NA
#create bar graph
#ggplot(aes(amenities_type)) +
ggplot(aes(x = fct_rev(fct_infreq(amenities_type)))) +
geom_bar(fill = 'steelblue', width = 0.9) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
ggtitle('Amenity Type Frequency') +
xlab('Type') +
ylab('Frequency') +
theme_minimal()
#convert amenities to factor
amenities_fct <- as.factor(apt_buildings$amenities)
#compute counts of each level
amenities_count <- fct_count(amenities_fct)
#convert each cell into single value
amenities_count %>%
separate(f, into = c('f1','f2','f3', 'f4','f5','f6'), sep = ' , ') %>% #convert each cell to single value
pivot_longer(c('f1','f2','f3', 'f4','f5','f6'), names_to = 'f', values_to = 'amenities_type') %>% #place amenities in single variable
select(amenities_type) %>% #show only amenities type
na.omit() %>% #omit NA
#create bar graph
ggplot(aes(amenities_type)) +
#ggplot(aes(x = fct_rev(fct_infreq(amenities_type)))) +
geom_bar(fill = 'steelblue', width = 0.9) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
ggtitle('Amenity Type Frequency') +
xlab('Type') +
ylab('Frequency') +
theme_minimal()
#count NA, tidy data and arrange in descending order
apt_buildings_NA <- apt_buildings %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = 'col_name', values_to = 'NA_count') %>%
arrange(desc(NA_count))
print(apt_buildings_NA)
#create bar graph for 5 columns with the highest number of NA values
apt_buildings_NA %>%
slice_max(NA_count, n = 5) %>%
#shorten column names to fit graph
mutate(col_name = fct_recode(col_name,
'prop_management' = 'prop_management_company_name',
'accessible_parking' = 'no_of_accessible_parking_spaces',
'barrier_free_accessible_units' = 'no_barrier_free_accessible_units')) %>%
#plot point graph in descending order
ggplot(aes(x = fct_rev(fct_reorder(col_name, NA_count)), y = NA_count)) +
geom_point() +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
ggtitle('Columns with Highest NA Count') +
xlab('Column') +
ylab('NA count') +
theme_economist()
#count NA, tidy data and arrange in descending order
apt_buildings_NA <- apt_buildings %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = 'col_name', values_to = 'NA_count') %>%
arrange(desc(NA_count))
print(apt_buildings_NA)
#create bar graph for 5 columns with the highest number of NA values
apt_buildings_NA %>%
slice_max(NA_count, n = 5) %>%
#shorten column names to fit graph
mutate(col_name = fct_recode(col_name,
'prop_management' = 'prop_management_company_name',
'accessible_parking' = 'no_of_accessible_parking_spaces',
'barrier_free_accessible_units' = 'no_barrier_free_accessible_units')) %>%
#plot point graph in descending order
ggplot(aes(x = fct_rev(fct_reorder(col_name, NA_count)), y = NA_count)) +
geom_point() +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
ggtitle('Columns with Highest NA Count') +
xlab('Column') +
ylab('NA count') +
theme_minimal()
#count NA, tidy data and arrange in descending order
apt_buildings_NA <- apt_buildings %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = 'col_name', values_to = 'NA_count') %>%
arrange(desc(NA_count))
print(apt_buildings_NA)
#create bar graph for 5 columns with the highest number of NA values
apt_buildings_NA %>%
slice_max(NA_count, n = 5) %>%
#shorten column names to fit graph
mutate(col_name = fct_recode(col_name,
'prop_management' = 'prop_management_company_name',
'accessible_parking' = 'no_of_accessible_parking_spaces',
'barrier_free_accessible_units' = 'no_barrier_free_accessible_units')) %>%
#plot point graph in descending order
ggplot(aes(x = fct_rev(fct_reorder(col_name, NA_count)), y = NA_count)) +
geom_col() +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
ggtitle('Columns with Highest NA Count') +
xlab('Column') +
ylab('NA count') +
theme_minimal()
#convert amenities to factor
amenities_fct <- as.factor(apt_buildings$amenities)
#compute counts of each level
amenities_count <- fct_count(amenities_fct)
#convert each cell into single value
amenities_count %>%
separate(f, into = c('f1','f2','f3', 'f4','f5','f6'), sep = ' , ') %>% #convert each cell to single value
pivot_longer(c('f1','f2','f3', 'f4','f5','f6'), names_to = 'f', values_to = 'amenities_type') %>% #place amenities in single variable
select(amenities_type) %>% #show only amenities type
na.omit() %>% #omit NA
#create bar graph in ascending order
ggplot(aes(x = fct_rev(fct_infreq(amenities_type)))) +
geom_bar(fill = 'steelblue', width = 0.9) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
ggtitle('Amenity Type Frequency') +
xlab('Type') +
ylab('Frequency') +
theme_minimal()
#count NA, tidy data and arrange in descending order
apt_buildings_NA <- apt_buildings %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
pivot_longer(cols = everything(), names_to = 'col_name', values_to = 'NA_count') %>%
arrange(desc(NA_count))
print(apt_buildings_NA)
#create bar graph for 5 columns with the highest number of NA values
apt_buildings_NA %>%
slice_max(NA_count, n = 5) %>%
#shorten column names to fit graph
mutate(col_name = fct_recode(col_name,
'prop_management' = 'prop_management_company_name',
'accessible_parking' = 'no_of_accessible_parking_spaces',
'barrier_free_accessible_units' = 'no_barrier_free_accessible_units')) %>%
#plot point graph in descending order
ggplot(aes(x = fct_rev(fct_reorder(col_name, NA_count)), y = NA_count)) +
geom_col(fill = 'steelblue') +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
ggtitle('Columns with Highest NA Count') +
xlab('Column') +
ylab('NA count') +
theme_minimal()
apt_buildings %>%
mutate(year_level = case_when(year_built < 1901 ~ '19th century',
year_built < 2001 ~ '20th century',
TRUE ~ '21st century')) %>%
ggplot(aes(x = year_level, y = no_of_accessible_parking_spaces)) +
geom_boxplot() +
geom_jitter(alpha = 0.2, colour = 'steelblue') +
scale_y_log10('no_of_accessible_parking_spaces') +
theme_classic()
apt_buildings %>%
mutate(year_level = case_when(year_built < 1901 ~ '19th century',
year_built < 2001 ~ '20th century',
TRUE ~ '21st century')) %>%
ggplot(aes(x = year_level, y = no_of_accessible_parking_spaces)) +
geom_boxplot(colour = 'steelblue') +
geom_jitter(alpha = 0.2, colour = 'steelblue') +
scale_y_log10('no_of_accessible_parking_spaces') +
theme_classic()
apt_buildings %>%
mutate(year_level = case_when(year_built < 1901 ~ '19th century',
year_built < 2001 ~ '20th century',
TRUE ~ '21st century')) %>%
ggplot(aes(x = year_level, y = no_of_accessible_parking_spaces)) +
geom_boxplot(colour = 'grey') +
geom_jitter(alpha = 0.2, colour = 'steelblue') +
scale_y_log10('no_of_accessible_parking_spaces') +
theme_classic()
head(apt_buildings)
no_unit_storeys <- apt_buildings %>%
select(no_of_storeys, no_of_units)
head(no_unit_storeys)
no_unit_storeys <- apt_buildings %>%
select(no_of_storeys, no_of_units)
head(no_unit_storeys)
head(apt_buildings)
no_unit_storeys <- apt_buildings %>%
select(no_of_storeys, no_of_units)
head(no_unit_storeys)
dim(apt_buildings)
no_unit_storeys <- apt_buildings %>%
select(no_of_storeys, no_of_units)
head(no_unit_storeys)
print(apt_buildings)
no_unit_storeys <- apt_buildings %>%
select(no_of_storeys, no_of_units)
print(no_unit_storeys)
print(apt_buildings)
no_unit_storeys <- apt_buildings %>%
select(no_of_storeys, no_of_units) %>%
arrange(desc(no_of_storeys))
no_unit_storeys <- apt_buildings %>%
select(no_of_storeys, no_of_units) %>%
arrange(desc(no_of_storeys))
print(no_unit_storeys)
apt_buildings_unit_storeys <- apt_buildings %>%
#select two columns of interest
select(no_of_storeys, no_of_units) %>%
#arrange in descending order
arrange(desc(no_of_storeys)) %>%
#shorten variable names
rename(storeys = no_of_storeys,
units = no_of_units)
print(apt_buildings_unit_storeys)
apt_buildings_unit_storeys <- apt_buildings %>%
#use select() to drop irrelevant columns
select(no_of_storeys, no_of_units) %>%
#use arrange() to reorder rows
arrange(no_of_units, no_of_storeys) %>%
#use desc() to sort rows in descending order
arrange(desc(no_of_units)) %>%
#use rename() to shorten column labels
rename(storeys = no_of_storeys,
units = no_of_units)
print(apt_buildings_unit_storeys)
apt_buildings_unit_storeys <- apt_buildings %>%
#use select() to drop irrelevant columns
select(no_of_storeys, no_of_units) %>%
#use arrange() to reorder rows
relocate(no_of_units) %>%
#use desc() to sort rows in descending order
arrange(desc(no_of_units)) %>%
#use rename() to shorten column labels
rename(storeys = no_of_storeys,
units = no_of_units)
print(apt_buildings_unit_storeys)
apt_buildings_unit_storeys <- apt_buildings %>%
#use select() to drop irrelevant columns
select(no_of_storeys, no_of_units) %>%
#use arrange() to reorder rows
relocate(no_of_units) %>%
#use desc() to sort rows in descending order
arrange(desc(no_of_units)) %>%
#use rename() to shorten column labels
rename(storeys = no_of_storeys,
units = no_of_units) %>%
slice(-1)
print(apt_buildings_unit_storeys)
apt_buildings_unit_storeys <- apt_buildings %>%
#use select() to drop irrelevant columns
select(no_of_storeys, no_of_units) %>%
#use arrange() to reorder rows
relocate(no_of_units) %>%
#use desc() to sort rows in descending order
arrange(desc(no_of_units)) %>%
#use rename() to shorten column labels
rename(storeys = no_of_storeys,
units = no_of_units) #%>%
#use slice() to remove first outlier row with 4000+ units
#slice(-1)
print(apt_buildings_unit_storeys)
print(apt_buildings_unit_storeys)
#prep data using 4-8 functions
apt_buildings_unit_storeys <- apt_buildings %>%
#use select() to drop irrelevant columns
select(no_of_storeys, no_of_units) %>%
#use arrange() to reorder rows
relocate(no_of_units) %>%
#use desc() to sort rows in descending order
arrange(desc(no_of_units)) %>%
#use rename() to shorten column labels
rename(storeys = no_of_storeys,
units = no_of_units) %>%
#use slice() to remove first outlier row with 4000+ units
slice(-1)
print(apt_buildings_unit_storeys)
print(apt_buildings_unit_storeys)
#prep data using 4-8 functions
apt_buildings_unit_storeys <- apt_buildings %>%
#use select() to drop irrelevant columns
select(no_of_storeys, no_of_units) %>%
#use arrange() to reorder rows
relocate(no_of_units) %>%
#use desc() to sort rows in descending order
arrange(desc(no_of_units)) %>%
#use rename() to shorten column labels
rename(storeys = no_of_storeys,
units = no_of_units) %>%
#use slice() to remove first outlier row with 4000+ units
slice(-1)
print(apt_buildings_unit_storeys)
#linear regression modeling
apt_buildings_unit_storeys %>%
ggplot(aes(x = storeys, y = units)) +
geom_point() +
geom_smooth(method = 'lm')
#prep data using 4-8 functions
apt_buildings_unit_storeys <- apt_buildings %>%
#use select() to drop irrelevant columns
select(no_of_storeys, no_of_units) %>%
#use arrange() to reorder rows
relocate(no_of_units) %>%
#use desc() to sort rows in descending order
arrange(desc(no_of_units)) %>%
#use rename() to shorten column labels
rename(storeys = no_of_storeys,
units = no_of_units) %>%
#use slice() to remove first outlier row with 4000+ units
slice(-1)
print(apt_buildings_unit_storeys)
#linear regression modeling
apt_buildings_unit_storeys %>%
ggplot(aes(x = storeys, y = units)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_grey()
#prep data using 4-8 functions
apt_buildings_unit_storeys <- apt_buildings %>%
#use select() to drop irrelevant columns
select(no_of_storeys, no_of_units) %>%
#use arrange() to reorder rows
relocate(no_of_units) %>%
#use desc() to sort rows in descending order
arrange(desc(no_of_units)) %>%
#use rename() to shorten column labels
rename(storeys = no_of_storeys,
units = no_of_units) %>%
#use slice() to remove first outlier row with 4000+ units
slice(-1)
print(apt_buildings_unit_storeys)
#linear regression modeling
apt_buildings_unit_storeys %>%
ggplot(aes(x = storeys, y = units)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_minimal()
#prep data using 4-8 functions
apt_buildings_unit_storeys <- apt_buildings %>%
#use select() to drop irrelevant columns
select(no_of_storeys, no_of_units) %>%
#use arrange() to reorder rows
relocate(no_of_units) %>%
#use desc() to sort rows in descending order
arrange(desc(no_of_units)) %>%
#use rename() to shorten column labels
rename(storeys = no_of_storeys,
units = no_of_units) %>%
#use slice() to remove first outlier row with 4000+ units
slice(-1)
print(apt_buildings_unit_storeys)
#linear regression modeling
apt_buildings_unit_storeys %>%
ggplot(aes(x = storeys, y = units)) +
geom_point(colour = 'steelblue') +
geom_smooth(method = 'lm') +
theme_minimal()
#prep data using 4-8 functions
apt_buildings_unit_storeys <- apt_buildings %>%
#use select() to drop irrelevant columns
select(no_of_storeys, no_of_units) %>%
#use arrange() to reorder rows
relocate(no_of_units) %>%
#use desc() to sort rows in descending order
arrange(desc(no_of_units)) %>%
#use rename() to shorten column labels
rename(storeys = no_of_storeys,
units = no_of_units) %>%
#use slice() to remove first outlier row with 4000+ units
slice(-1)
print(apt_buildings_unit_storeys)
#linear regression modeling
apt_buildings_unit_storeys %>%
ggplot(aes(x = storeys, y = units)) +
geom_point(colour = 'steelblue') +
geom_smooth(method = 'lm', colour = 'grey') +
theme_minimal()
#prep data using 4-8 functions
apt_buildings_unit_storeys <- apt_buildings %>%
#use select() to drop irrelevant columns
select(no_of_storeys, no_of_units) %>%
#use arrange() to reorder rows
relocate(no_of_units) %>%
#use desc() to sort rows in descending order
arrange(desc(no_of_units)) %>%
#use rename() to shorten column labels
rename(storeys = no_of_storeys,
units = no_of_units) %>%
#use slice() to remove first outlier row with 4000+ units
slice(-1)
print(apt_buildings_unit_storeys)
#linear regression modeling
apt_buildings_unit_storeys %>%
ggplot(aes(x = storeys, y = units)) +
geom_point(colour = 'steelblue') +
geom_smooth(method = 'lm', colour = 'black') +
theme_minimal()
apt_buildings %>%
mutate(year_level = case_when(year_built < 1901 ~ '19th century',
year_built < 2001 ~ '20th century',
TRUE ~ '21st century')) %>%
ggplot(aes(x = year_level, y = no_of_accessible_parking_spaces)) +
geom_boxplot(colour = 'black') +
geom_jitter(alpha = 0.2, colour = 'steelblue') +
scale_y_log10('no_of_accessible_parking_spaces') +
theme_classic()
apt_buildings %>%
mutate(year_level = case_when(year_built < 1901 ~ '19th century',
year_built < 2001 ~ '20th century',
TRUE ~ '21st century')) %>%
ggplot(aes(x = year_level, y = no_of_accessible_parking_spaces)) +
geom_boxplot(colour = 'grey') +
geom_jitter(alpha = 0.2, colour = 'steelblue') +
scale_y_log10('no_of_accessible_parking_spaces') +
theme_classic()
print(apt_buildings_unit_storeys)
glance(apt_buildings_unit_storeys)
library(datateachr)
library(tidyverse)
library(broom)
glance(apt_buildings_unit_storeys)
library(datateachr)
library(tidyverse)
install.packages("broom")
library(broom)
library(datateachr)
library(tidyverse)
library(broom)
library(datateachr)
library(tidyverse)
library(broom)
glance(apt_buildings_unit_storeys)
